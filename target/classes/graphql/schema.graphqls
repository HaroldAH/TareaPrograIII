# ==============================
# ✅ SCHEMA GRAPHQL - Usuarios + Permisos por Módulo (con Coach)
# ==============================

# ===== Enums =====
enum Module { HABITS ROUTINES PROGRESS GUIDES REMINDERS USERS }
enum ModulePermission { CONSULT MUTATE }  # "sin fila" = sin permiso

# ===== Tipos =====
type UserPermission {
  module: Module!
  permission: ModulePermission!
}

type UserDTO {
  id: ID!
  name: String!
  email: String!

  # Flags globales
  isAuditor: Boolean!
  isCoach: Boolean!              # NUEVO

  # Relación 1→N (usuario puede tener un coach asignado)
  assignedCoachId: ID            # NUEVO (null si no tiene coach)

  # Permisos modulares
  permissions: [UserPermission!]!

  # Campo legado (si aún existe en BD pero ya no se usa)
  role: String @deprecated(reason: "Reemplazado por permisos por módulo.")
}

# ===== Inputs =====
input ModulePermissionInput {
  module: Module!
  permission: ModulePermission!
}

input UserInput {
  id: ID
  name: String!
  email: String!
  password: String!

  isAuditor: Boolean = false
  isCoach: Boolean = false         # NUEVO
  assignedCoachId: ID              # NUEVO (opcional al crear)

  permissions: [ModulePermissionInput!]

  # Legado; puedes ignorarlo en el resolver
  role: String @deprecated(reason: "Use 'permissions', 'isAuditor' y 'isCoach'.")
}

# ===== Consultas =====
type Query {
  getAllUsers: [UserDTO!]!
  getUserById(id: ID!): UserDTO

  # Lista de usuarios asignados a un coach específico
  usersAssignedToCoach(coachId: ID!): [UserDTO!]!
}

# ===== Mutaciones =====
type Mutation {
  # CRUD básico
  createUser(input: UserInput!): UserDTO
  deleteUser(id: ID!): Boolean

  # Auth (si las usas)
  login(email: String!, password: String!): String
  logout(token: String!): Boolean

  # Permisos por módulo
  setUserModulePermission(userId: ID!, module: Module!, permission: ModulePermission!): UserDTO
  revokeUserModulePermission(userId: ID!, module: Module!): UserDTO
  setUserPermissions(userId: ID!, permissions: [ModulePermissionInput!]!): UserDTO

  # Flags globales
  setAuditor(userId: ID!, auditor: Boolean!): UserDTO
  setCoach(userId: ID!, coach: Boolean!): UserDTO              # NUEVO (XOR con Auditor en service)

  # Asignación 1→N (usuarios → coach)
  setUserCoach(userId: ID!, coachId: ID!): UserDTO             # NUEVO
}
extend type Query {
  myCoachees: [UserDTO!]!
}


extend type Mutation {
  # Registro público
  register(name: String!, email: String!, password: String!): UserDTO!

  # Recuperación de acceso
  requestPasswordReset(email: String!): Boolean!
  resetPassword(token: String!, newPassword: String!): Boolean!

  # Autenticado
  changeMyPassword(oldPassword: String!, newPassword: String!): Boolean!
}
