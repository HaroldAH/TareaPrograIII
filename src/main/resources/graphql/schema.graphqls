# ==============================
# ✅ SCHEMA GRAPHQL - Usuarios + Permisos por Módulo
# ==============================

# ===== Permisos por módulo =====
enum Module { HABITS ROUTINES PROGRESS GUIDES REMINDERS USERS }
enum ModulePermission { CONSULT MUTATE }  # "NADA" = sin fila

type UserPermission {
  module: Module!
  permission: ModulePermission!
}

# ===== DTOs =====
type UserDTO {
  id: ID!
  name: String!
  email: String!
  isAuditor: Boolean!
  permissions: [UserPermission!]!

  # Campo legado: si lo conservas, mándalo como null
  role: String @deprecated(reason: "Reemplazado por permisos por módulo (Module/ModulePermission).")
}

# ===== Inputs =====
input ModulePermissionInput {
  module: Module!
  permission: ModulePermission!
}

input UserInput {
  id: ID
  name: String!
  email: String!
  password: String!
  isAuditor: Boolean = false
  permissions: [ModulePermissionInput!]

  # Legado; ignóralo en el resolver
  role: String @deprecated(reason: "Ya no se usa. Utilice 'permissions' e 'isAuditor'.")
}

# ===== Tipos base =====
type Query {
  getAllUsers: [UserDTO!]!
  getUserById(id: ID!): UserDTO
}

type Mutation {
  createUser(input: UserInput!): UserDTO
  deleteUser(id: ID!): Boolean

  # Auth
  login(email: String!, password: String!): String
  logout(token: String!): Boolean

  # Permisos por módulo
  setUserModulePermission(userId: ID!, module: Module!, permission: ModulePermission!): UserDTO
  revokeUserModulePermission(userId: ID!, module: Module!): UserDTO
  setUserPermissions(userId: ID!, permissions: [ModulePermissionInput!]!): UserDTO
  setAuditor(userId: ID!, auditor: Boolean!): UserDTO
}
