package com.tarea.services;

import com.tarea.dtos.ProgressLogDTO;
import com.tarea.models.Progresslog;
import com.tarea.models.Routine;
import com.tarea.models.User;
import com.tarea.repositories.ProgressLogRepository;
import com.tarea.repositories.RoutineRepository;
import com.tarea.repositories.UserRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class ProgressLogService {

    private final ProgressLogRepository progressLogRepository;
    private final UserRepository userRepository;
    private final RoutineRepository routineRepository;

    public ProgressLogService(ProgressLogRepository progressLogRepository,
                              UserRepository userRepository,
                              RoutineRepository routineRepository) {
        this.progressLogRepository = progressLogRepository;
        this.userRepository = userRepository;
        this.routineRepository = routineRepository;
    }

    public List<ProgressLogDTO> getAll() {
        return progressLogRepository.findAll()
                .stream()
                .map(this::toDTO)
                .collect(Collectors.toList());
    }

    public ProgressLogDTO getById(Long id) {
        return progressLogRepository.findById(id)
                .map(this::toDTO)
                .orElse(null);
    }

    public ProgressLogDTO save(ProgressLogDTO dto) {
        Progresslog entity = new Progresslog();
        entity.setId(dto.getId());
        entity.setDate(dto.getDate());
        entity.setStatus(dto.getStatus());

        User user = userRepository.findById(dto.getUserId())
                .orElseThrow(() -> new IllegalArgumentException("User not found: " + dto.getUserId()));
        Routine routine = routineRepository.findById(dto.getRoutineId())
                .orElseThrow(() -> new IllegalArgumentException("Routine not found: " + dto.getRoutineId()));

        entity.setUser(user);
        entity.setRoutine(routine);

        return toDTO(progressLogRepository.save(entity));
    }

    public void delete(Long id) {
        progressLogRepository.deleteById(id);
    }

    private ProgressLogDTO toDTO(Progresslog entity) {
        ProgressLogDTO dto = new ProgressLogDTO();
        dto.setId(entity.getId());
        dto.setUserId(entity.getUser().getId());
        dto.setRoutineId(entity.getRoutine().getId());
        dto.setDate(entity.getDate());
        dto.setStatus(entity.getStatus());
        return dto;
    }
}
